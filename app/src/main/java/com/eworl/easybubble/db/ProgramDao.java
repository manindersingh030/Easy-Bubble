package com.eworl.easybubble.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.eworl.easybubble.db.Program;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PROGRAM".
*/
public class ProgramDao extends AbstractDao<Program, Void> {

    public static final String TABLENAME = "PROGRAM";

    /**
     * Properties of entity Program.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property AppName = new Property(0, String.class, "appName", false, "APP_NAME");
        public final static Property AppIcon = new Property(1, String.class, "appIcon", false, "APP_ICON");
        public final static Property PackageName = new Property(2, String.class, "packageName", false, "PACKAGE_NAME");
        public final static Property IsSelected = new Property(3, Boolean.class, "isSelected", false, "IS_SELECTED");
    };


    public ProgramDao(DaoConfig config) {
        super(config);
    }
    
    public ProgramDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PROGRAM\" (" + //
                "\"APP_NAME\" TEXT," + // 0: appName
                "\"APP_ICON\" TEXT," + // 1: appIcon
                "\"PACKAGE_NAME\" TEXT UNIQUE ," + // 2: packageName
                "\"IS_SELECTED\" INTEGER);"); // 3: isSelected
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PROGRAM\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Program entity) {
        stmt.clearBindings();
 
        String appName = entity.getAppName();
        if (appName != null) {
            stmt.bindString(1, appName);
        }
 
        String appIcon = entity.getAppIcon();
        if (appIcon != null) {
            stmt.bindString(2, appIcon);
        }
 
        String packageName = entity.getPackageName();
        if (packageName != null) {
            stmt.bindString(3, packageName);
        }
 
        Boolean isSelected = entity.getIsSelected();
        if (isSelected != null) {
            stmt.bindLong(4, isSelected ? 1L: 0L);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public Program readEntity(Cursor cursor, int offset) {
        Program entity = new Program( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // appName
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // appIcon
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // packageName
            cursor.isNull(offset + 3) ? null : cursor.getShort(offset + 3) != 0 // isSelected
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Program entity, int offset) {
        entity.setAppName(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setAppIcon(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPackageName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setIsSelected(cursor.isNull(offset + 3) ? null : cursor.getShort(offset + 3) != 0);
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(Program entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(Program entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
